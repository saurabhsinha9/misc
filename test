Kubernetes challenge 2

Here is the detailed guide for completing the hands-on task with Kubernetes ConfigMaps, Secrets, Persistent Volumes, and RBAC:

### **Environment Setup**

1. **Check Docker and Minikube**:
- Ensure Docker is installed and running by checking with:
```bash
docker --version
```
- Ensure Minikube is installed and running:
```bash
minikube version
```
- Start Minikube:
```bash
minikube start
```
- Sync host Docker with Minikube Docker:
```bash
minikube -p minikube docker-env
eval $(minikube -p minikube docker-env)
```

---

### **Step 1: ConfigMaps**

1. **Create ConfigMap** named `fresco-config`:
```bash
kubectl create configmap fresco-config --from-literal=SERVER_URL=https://www.fresco.me
```

2. **Verify** if the ConfigMap is created:
```bash
kubectl get configmap fresco-config -o yaml
```

---

### **Step 2: Create an Nginx Pod with ConfigMap**

1. Create a YAML file `fresco-nginx-pod.yaml` with the following content:
```yaml
apiVersion: v1
kind: Pod
metadata:
name: fresco-nginx-pod
spec:
containers:
- name: fresco-nginx-container
image: nginx
env:
- name: SERVER_URL_ENV
valueFrom:
configMapKeyRef:
name: fresco-config
key: SERVER_URL
```

2. Apply the YAML file:
```bash
kubectl apply -f fresco-nginx-pod.yaml
```

3. **Test the configuration**:
```bash
kubectl exec -it fresco-nginx-pod -- sh -c env | grep SERVER_URL_ENV
```
It should display:
```
SERVER_URL_ENV=https://www.fresco.me
```

---

### **Step 3: Secrets**

1. **Create a Secret** named `fresco-secret`:
```bash
kubectl create secret generic fresco-secret --from-literal=user=admin --from-literal=pass=pass
```

2. **Modify the nginx pod** to add the Secret:
Add this part to the previous YAML file under the `spec` section:
```yaml
volumeMounts:
- name: secret-volume
mountPath: /etc/test
volumes:
- name: secret-volume
secret:
secretName: fresco-secret
```

3. **Update the nginx pod**:
```bash
kubectl apply -f fresco-nginx-pod.yaml
```

4. **Test if the Secret is properly mounted**:
```bash
kubectl exec -it fresco-nginx-pod -- sh -c "cat /etc/test/* | base64 -d"
```
It should display:
```
admin
pass
```

---

### **Step 4: Persistent Volume and Persistent Volume Claim**

1. **Create a Persistent Volume (PV)**:
Create `pv.yaml`:
```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
name: fresco-pv
spec:
capacity:
storage: 100Mi
accessModes:
- ReadWriteOnce
storageClassName: manual
hostPath:
path: "/tmp/fresco"
```

2. Apply the PV:
```bash
kubectl apply -f pv.yaml
```

3. **Create a Persistent Volume Claim (PVC)**:
Create `pvc.yaml`:
```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
name: fresco-pvc
spec:
accessModes:
- ReadWriteOnce
resources:
requests:
storage: 50Mi
storageClassName: manual
```

4. Apply the PVC:
```bash
kubectl apply -f pvc.yaml
```

5. **Verify if PVC is bound to PV**:
```bash
kubectl get pvc fresco-pvc
```

6. **Modify the nginx pod** to use PVC for `/usr/share/nginx/html`:
Update the pod YAML file to include:
```yaml
volumeMounts:
- name: pvc-volume
mountPath: /usr/share/nginx/html
volumes:
- name: pvc-volume
persistentVolumeClaim:
claimName: fresco-pvc
```

7. Apply the updated YAML:
```bash
kubectl apply -f fresco-nginx-pod.yaml
```

---

### **RBAC Section: Create User, Role, and Bindings**

1. **Create Namespace**:
```bash
kubectl create namespace dev
```

2. **Generate private key** for user `emp`:
```bash
openssl genrsa -out emp.key 2048
```

3. **Generate a Certificate Signing Request (CSR)**:
```bash
openssl req -new -key emp.key -out emp.csr -subj "/CN=emp/O=dev"
```

4. **Generate emp.crt** by approving the CSR:
```bash
openssl x509 -req -in emp.csr -CA /var/lib/minikube/certs/ca.crt -CAkey /var/lib/minikube/certs/ca.key -CAcreateserial -out emp.crt -days 365
```

5. **Create a new context**:
```bash
kubectl config set-credentials emp --client-certificate=emp.crt --client-key=emp.key
kubectl config set-context dev-ctx --cluster=minikube --namespace=dev --user=emp
```

6. **Create a Role** with `get` and `list` permissions for pods and deployments:
Create `role.yaml`:
```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
namespace: dev
name: emp-role
rules:
- apiGroups: [""]
resources: ["pods", "deployments"]
verbs: ["get", "list"]
```

7. Apply the role:
```bash
kubectl apply -f role.yaml
```

8. **Create RoleBinding** to bind the role to the user:
Create `rolebinding.yaml`:
```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
name: emp-bind
namespace: dev
subjects:
- kind: User
name: emp
apiGroup: rbac.authorization.k8s.io
roleRef:
kind: Role
name: emp-role
apiGroup: rbac.authorization.k8s.io
```

9. Apply the RoleBinding:
```bash
kubectl apply -f rolebinding.yaml
```

10. **Run an nginx pod** in the `dev` namespace:
```bash
kubectl run nginx --image=nginx --context=dev-ctx --namespace=dev
```

11. **Verify deployment**:
```bash
kubectl --context=dev-ctx get pods -o wide
```

12. **Test access restriction** for the `default` namespace:
```bash
kubectl --context=dev-ctx get pods -n default
```
You should see a **"forbidden" error** because `emp` only has access to the `dev` namespace.

---

These steps should successfully complete your hands-on with Kubernetes ConfigMaps, Secrets, Persistent Volumes, and RBAC.
